name: Install Tests

on:
  pull_request:

jobs:
  # Matrix items cannot access variable defined in an `env` section, but they can read outputs from other jobs.
  set-env-vars:
    name: Set Environment Variables
    runs-on: ubuntu-latest
    outputs:
      darwin_os: darwin
      arm64_arch: arm64
      linux_os: linux
      amd64_arch: amd64
    steps:
      - name: Set matrix variables
        run: echo "Created env variables accessible by matrix"

  test-installation:
    name: ${{ matrix.os }} ${{ matrix.arch }} (${{ matrix.shell }})
    needs: set-env-vars
    strategy:
      fail-fast: false
      matrix:
        include:
          # Darwin (macOS) combinations - matching release workflow
          - os: ${{ needs.set-env-vars.outputs.darwin_os }}
            arch: ${{ needs.set-env-vars.outputs.arm64_arch }}
            runner: macos-15
            shell: bash
          - os: ${{ needs.set-env-vars.outputs.darwin_os }}
            arch: ${{ needs.set-env-vars.outputs.arm64_arch }}
            runner: macos-15
            shell: zsh
          - os: ${{ needs.set-env-vars.outputs.darwin_os }}
            arch: ${{ needs.set-env-vars.outputs.amd64_arch }}
            runner: macos-13
            shell: bash
          - os: ${{ needs.set-env-vars.outputs.darwin_os }}
            arch: ${{ needs.set-env-vars.outputs.amd64_arch }}
            runner: macos-13
            shell: zsh
          # Linux combinations - matching release workflow
          - os: ${{ needs.set-env-vars.outputs.linux_os }}
            arch: ${{ needs.set-env-vars.outputs.arm64_arch }}
            runner: ubuntu-24.04-arm
            shell: bash
          - os: ${{ needs.set-env-vars.outputs.linux_os }}
            arch: ${{ needs.set-env-vars.outputs.arm64_arch }}
            runner: ubuntu-24.04-arm
            shell: zsh
          - os: ${{ needs.set-env-vars.outputs.linux_os }}
            arch: ${{ needs.set-env-vars.outputs.amd64_arch }}
            runner: ubuntu-latest
            shell: bash
          - os: ${{ needs.set-env-vars.outputs.linux_os }}
            arch: ${{ needs.set-env-vars.outputs.amd64_arch }}
            runner: ubuntu-latest
            shell: zsh
          # Linux + dash (POSIX compliance check)
          - os: ${{ needs.set-env-vars.outputs.linux_os }}
            arch: ${{ needs.set-env-vars.outputs.amd64_arch }}
            runner: ubuntu-latest
            shell: dash

    runs-on: ${{ matrix.runner }}
    
    steps:
    - name: Install zsh (Ubuntu only)
      if: startsWith(matrix.runner, 'ubuntu') && matrix.shell == 'zsh'
      run: |
        sudo apt-get update
        sudo apt-get install -y zsh

    - name: Install dash (Ubuntu only)
      if: startsWith(matrix.runner, 'ubuntu') && matrix.shell == 'dash'
      run: |
        sudo apt-get update
        sudo apt-get install -y dash

    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Run installation script with selected shell
      run: ${{ matrix.shell }} cli/install.sh

  # Hack to have a single branch protection rule instead of one per matrix entry
  all-tests-passed:
    name: All Install Tests Passed
    if: always()
    runs-on: ubuntu-latest
    needs: test-installation
    steps:
      - name: All installations ok
        if: ${{ !(contains(needs.*.result, 'failure')) }}
        run: |
          echo "✅ All installation tests passed successfully"
          exit 0
      - name: Some installations failed
        if: ${{ contains(needs.*.result, 'failure') }}
        run: |
          echo "❌ Some installation tests failed"
          exit 1